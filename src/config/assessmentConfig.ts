// src/config/assessmentConfig.ts

/**
 * AssessmentConfig - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
 */
export interface AssessmentConfig {
  maxDTI: number; // DTI ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (%)
  weights: {
    paymentHistory: number; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ
    debtRatio: number; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å DTI
    savings: number; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏° / ‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô
    incomeStability: number; // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
  };
  creditThreshold: number; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
}

/**
 * defaultConfig - ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
 */
export const defaultConfig: AssessmentConfig = {
  maxDTI: 40, // DTI ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 40%
  weights: {
    paymentHistory: 35,
    debtRatio: 30,
    savings: 20,
    incomeStability: 15,
  },
  creditThreshold: 70,
};

/**
 * ApplicantData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
 */
export interface ApplicantData {
  paymentHistory: number; // 0‚Äì100 (‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤)
  debtRatio: number; // DTI (%) = ‡∏´‡∏ô‡∏µ‡πâ / ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
  savings: number; // 0‚Äì100 (‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°/‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô)
  incomeStability: number; // 0‚Äì100 (‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ)
}

/**
 * validateConfig - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á config
 */
export const validateConfig = (config: AssessmentConfig): boolean => {
  const totalWeight = Object.values(config.weights).reduce((a, b) => a + b, 0);
  return totalWeight === 100;
};

/**
 * calculateCreditScore - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
 */
export const calculateCreditScore = (
  data: ApplicantData,
  config: AssessmentConfig = defaultConfig,
): number => {
  const { paymentHistory, debtRatio, savings, incomeStability } = data;
  const { maxDTI, weights } = config;

  // Normalize DTI: ‡∏ñ‡πâ‡∏≤ DTI ‡πÄ‡∏Å‡∏¥‡∏ô maxDTI ‚Üí ‡πÑ‡∏î‡πâ 0 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  const normalizedDTI = debtRatio <= maxDTI ? (1 - debtRatio / maxDTI) * 100 : 0;

  const score =
    (paymentHistory * weights.paymentHistory) / 100 +
    (normalizedDTI * weights.debtRatio) / 100 +
    (savings * weights.savings) / 100 +
    (incomeStability * weights.incomeStability) / 100;

  return Math.round(score);
};

/**
 * assessCreditStatus - ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export const assessCreditStatus = (
  score: number,
  threshold: number = defaultConfig.creditThreshold,
): 'APPROVED' | 'REJECTED' => {
  return score >= threshold ? 'APPROVED' : 'REJECTED';
};

/**
 * üîπ Example usage:
 *
 * const applicant: ApplicantData = {
 *   paymentHistory: 80,
 *   debtRatio: 35,
 *   savings: 60,
 *   incomeStability: 70,
 * };
 *
 * if (!validateConfig(defaultConfig)) {
 *   throw new Error("Invalid config: weights must sum to 100");
 * }
 *
 * const score = calculateCreditScore(applicant, defaultConfig);
 * const status = assessCreditStatus(score, defaultConfig.creditThreshold);
 *
 * console.log("Score:", score, "Status:", status);
 */
