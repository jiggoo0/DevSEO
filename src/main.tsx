'use client';

import React, { FC, Suspense } from 'react';
import ReactDOM from 'react-dom/client';
import AppProviders from '@/context/AppProviders';
import AppRouter from '@/Router/AppRouter';
import ErrorBoundary from '@/utils/common/ErrorBoundary';
import FallbackLoader from '@/utils/common/FallbackLoader';

// Styles
import '@radix-ui/themes/styles.css';
import '@Styles/global.css';
import '@Styles/driverLicense.css';
import '@/index.css';

/**
 * RootApp
 * -------------------------
 * ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:
 * - AppProviders: context ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
 * - ErrorBoundary: ‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å error ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô App
 * - Suspense + FallbackLoader: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lazy loading ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
 */
const RootApp: FC = () => (
  <AppProviders>
    <ErrorBoundary fallbackMessage="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà">
      <Suspense fallback={<FallbackLoader message="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏≠‡∏õ..." />}>
        <AppRouter />
      </Suspense>
    </ErrorBoundary>
  </AppProviders>
);

/**
 * Ensure root element exists
 */
const ensureRootElement = (): HTMLElement => {
  let root = document.getElementById('root');
  if (!root) {
    root = document.createElement('div');
    root.id = 'root';
    document.body.appendChild(root);
  }
  return root;
};

/**
 * React 18 Root API
 */
const root = ReactDOM.createRoot(ensureRootElement());
root.render(
  <React.StrictMode>
    <RootApp />
  </React.StrictMode>,
);

// -------------------- Dev Info (optional, dummy) --------------------
if (import.meta.env.DEV) {
  console.groupCollapsed('üì¶ JP-System App Info');
  console.info('üöÄ Version:', 'dev'); // dummy
  console.info('üìù Build Time:', new Date().toISOString()); // dummy
  console.info('üîß Mode:', 'development');
  console.info('üåç Base URL:', '/');
  console.groupEnd();
}

// -------------------- Service Worker --------------------
// ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ project standalone ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á SW
// if ('serviceWorker' in navigator && import.meta.env.PROD) {
//   navigator.serviceWorker
//     .register(`/sw.js`)
//     .then((reg) => console.log('‚úÖ SW registered:', reg.scope))
//     .catch((err) => console.error('‚ùå SW registration failed:', err));
// }

export {};